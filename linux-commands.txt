/************************* CALendar **************************/

cal - show calendar of current month
cal 2020 - show calendar for year
cal {month} {year} - show calendar of month of specified year

/************************* LS **************************/

ls - list files in dir
ls /var - list files in directory named 'var'
ls -l /var (letter l) - list files -l (verbose/long); 
ls -l -t /var - list files -l (verbose) -t (sorted by date/time) in dir named var
ls -lt /var
ls -tl /var

/************************ LS & HELP **************************/

ls --help
man ls
whatis ls
apropos list
apropos 'list directory'
help
env -  displays a listing of other variables which you may also refer to.

/************************* NOTES **************************!/

Typing small bit of command or letter and hitting tab twice, 
displays suggested/available commands.

Redirection with > overwrites anything in the file; using >> preserves content and appends the new output at the end of the file.

/************************* FILE MANIPULATION EXMPLES **************************!/

pwd - print working directory
mkdir - create a directory ; param is directory name ('mkdir test')
cd test - change directory to 'test' folder
cd ~ - navigate to root/home
cd .. - navigate a level up from current directory
ls -a - list all directory entries including any hidden files
touch file1 - Creates a new empty file. Argument is name of file. Also modifies timestamp if actioned on existing file.
date > file2 - The '>' symbol will redirect output from the screen into a file. In the example given, the output from the date command is redirected to file2, creating it if it doesn’t exist or overwriting it if it does.
file folder1 - The file command will inspect the contents of a file and report what type of file it is. 
cat file2 - The cat command is very commonly used to display the content of a file on screen. The seemingly odd name is an abbreviation of catenate or concatenate, meaning to link together in a chain. If several files are given as arguments, then cat will output each file in turn, concatenating them into a single stream. The output can then be redirected into a single file using the > symbol.
cal > file3
cat file1 file2 file3
cat file1 file2 file3 > combined - combines all 3 files into new combined. If no file exists, write file.
cat combined

/************************* Copy **************************!/

cp {directory to copy} [file/directory] - copy command; The second argument specifies where the copy will be located: this can specify either a directory, or a new filename or both.
mv - move command,  it is also the command used to rename a file. In either case, just one copy of the file remains and it has a new path/filename
cp -r folder1 folder2 - The cp command can also be used to copy directories with the -r (recursive) option.

/************************* SUDO **************************!/

cat /etc/shadow - If on !sudo ; permission denied
sudo cat /etc/shadow - The /etc/shadow file contains information about user accounts, not readable by normal users. Hence permission denial above.
sudo su root - switch shell to another user account, here root.
#### The su (switch user command) allows you to log into the CLI as a different user, include example of root above, but also another existing user. Password prompts are given if password is set.
cat /etc/shadow - as a root user, you can call without sudo on /etc/shadow/
exit - exits su root

/************************* SUDO **************************!/

/************************* | less **************************!/
cat file3 

cat file 3 | less - less option after pipe, displays output one page at a time. Press h for help or q for quit

/************************* FIND **************************!/

find /etc -name '*.conf' | less - find in /etc dir by -name (string)'fileName example'. Asterisk in name to match any characters
find Development/ -name 'cy' > tempfile | less - find in Development dir by -name (string)'fileName example'. Asterisk in name to match any characters

/************************* GREP **************************!/
        ==================================================
            grep is an abbreviation for ‘global regular expression print’ 
            and will search for text patterns 
            and output matches to the console.
        ==================================================
            The output from cat is piped into grep,
            which will check each line and display those that match the search string. 
            The search string here is looking for a simple literal match to ‘hz’. 
            The -i (ignore case) option ensures that variants such as ‘Hz’ and ‘HZ’ are also found.
        ==================================================

cat /proc/cpuinfo - Show processor information (located in /proc/)
cat /proc/cpuinfo | grep -i 'hz'
cat /proc/cpuinfo | grep -i 'hz' | less

/************************* Returning data from file to terminal **************************!/

find Development/ -name 'cy' > tempfile
less < tempfile

/************************* TAR (tape archive) **************************!/
        ===================================================
            standard program used to create an archive
        ===================================================


tar --list --file=life.tar.gz - list files within zip
tar --extract --verbose --file=life.tar.gz - extracts zip
tar --create --verbose --file=mylife.tar life/ - create a file in specified dir
tar --list --file=mylife.ta - list contents of file="fileName"
cd .. - navigate 1 level up
mkdir extract - make new directory
cp work/mylife.tar extract/ - copy file to different directory
tar --extract --verbose --file=mylife.tar - extract file
less < mylife.tar - See the data of file on less

        ===================================================
    the compression method is given as an additional parameter to tar 
    which will call on the appropriate utility, gzip or bzip2, 
    to carry out the compression.
        ===================================================

tar --create --verbose --gzip --file=mylife.tgz life/ - create files via gzip to specified directory
tar --create --verbose --bzip2 --file=mylife.tbz life/ - create file via bzip2 to specified directory

        ===================================================
    Extract files. Will overrite if already existing
        ===================================================

tar --extract --verbose --file=mylife.tgz
tar --extract --verbose --file=mylife.tbz

        ===================================================
    Extract specific parts of zip file into working dir. Will override 
    if already existing
        ===================================================

tar --extract --verbose --file=mylife.tgz life/animals/insects
tar --extract --verbose --file=mylife.tgz life/animals/birds/penguin

/************************* SHA256SUM **************************!/

sha256sum {file} - displays hash of file
sha256sum - enters console type mode

/************************* DIFF -r (recursive) **************************!/
        ===================================================
            The diff command can be used to compare the contents of single files or, 
            with the -r option given here, recursively for all files in a directory.
        ===================================================

diff -r ~/work/life ~/extract/life - 
ls -R -l ~/extract/life


/************************* Compression **************************!/
        ===================================================
            2 commonly used are:
                - gzip  (addes new file with same name && .gz extension added.)
                - bzip2 (more space-efficient)
        ===================================================

gzip mylife.tar - compress file using gzip 
ls
gunzip mylife.tar.gz - Paired (to gzip) command gunzip decompresses the file, stripping off the extension.
ls
gzip --verbose --keep mylife.tar - '--keep' option retains the original file
bzip2 --verbose --keep mylife.tar - '--verbose' displays compression ratio achieved

        ===================================================
            2 commonly used are:
                - zip
                - unzip
        ===================================================

/************************* Calling Scripts **************************!/
        ===================================================
            Below represents dynamic values to be used with commands, 
            within the script; when calling on a script 
            and passing arguments to the script via CLI.            
        ===================================================

$0 - The name of the Bash script.
$1 - $9 - The first 9 arguments to the Bash script. (As mentioned above.)
$# - How many arguments were passed to the Bash script.
$@ - All the arguments supplied to the Bash script.
$? - The exit status of the most recently run process.
$$ - The process ID of the current script.
$USER - The username of the user running the script.
$HOSTNAME - The hostname of the machine the script is running on.
$SECONDS - The number of seconds since the script was started.
$RANDOM - Returns a different random number each time is it referred to.
$LINENO - Returns the current line number in the Bash script.

        ===================================================
            Calling variables from differet scrips via export,
            Example:
                - script.sh exists, and within checking-version.sh we 
            export vars, which are called within script.sh.         
        ===================================================

/************************* Exercise **************************!/
        ===================================================
            When in Nano:
            ctrl + o   &&     ctrl + x 
            save       and     exit           
        ===================================================
        ===================================================
        ADDING SCRIPT AS UTILITY:
        
            For a script used only by yourself, 
            normal practice would be to move the script 
            to a directory ~/bin which must be added to PATH. 
            If the script is useful to all users, 
            root could move it to /usr/local/bin which will
            be on the PATH for all users. 

            That might also be the time to lose the .sh extension
            so that your script would be indistinguishable 
            from all the other scripts and binary programs 
            installed on the system. 
            
            Once all these steps are complete, 
            any user of your system could enter hello 
            and receive the output ‘Hello world!’.
        ===================================================

cd scripts
nano hello.sh - opens nano and lets you write out to file.
ls -l hello.sh - list created file -long
chmod +x hello.sh - mark file as executable file
ls -F hello.sh - list executable files with *
./hello.sh - run file without shebang
hello.sh - run file with sheband 
/home/<youraccount>/Development/shells/scripts/hello.sh
echo $PATH


/************************* ps/top/htop **************************!/
        ===================================================
        'ps' shows processes owned by you and running 
            on current shell session.
                ->   PID TTY           TIME CMD
                    1304 ttys000    0:00.02 -bash
        ===================================================
        'top' opens non-human readable task manager
        'htop' opens human readable task manager
        ===================================================
ps 

ps -x 
ps -u {user} # specifying '-u'/user and user ID/name
top # 'q' to exit
htop # F10 to exit

/************************* sleep **************************!/
        ===================================================
        An interrupted job with sleep for example, user 
        in combination with fg %1 or bg %1 will allow interrupted
        job to return to its completion
        ===================================================

./timewaster.sh 10 # IF YOU PRESS ctrl+z to interrupted

fg %1 # This will make previously interrupted job return to execution
bg %1 # This will make previously interrupted job return to exectuion, but in background

./timewaster.sh 11 & # Similar to running job and entering bg %1 after

        ===================================================
        If you run:

        - ./timewaster.sh 11 & (PRESS ENTER)
        - ./timewaster.sh 12 & (PRESS ENTER)
        - ./timewaster.sh 10 & (PRESS ENTER)

        Then you action 'jobs', it should show you:

        [3]-  Running                 ./timewaster.sh 11 &
        [4]+  Running                 ./timewaster.sh 12 &
        [5]+  Running                 ./timewaster.sh 10 &

        If you kill the first running process using:
        - kill %1 

        The below will show

        [1]-  Terminated: 15          ./timewaster.sh 11 & 
        [2]+  Running                 ./timewaster.sh 12 &

        A job that is running in the background can 
        be brought to the foreground with the fg command.
        ===================================================

/************************* pstree **************************!/
        ===================================================
        this commands shows the running processes as a tree
        not on bash by default; can be installed via homebrew
        ===================================================
pstree 

/************************* crontab **************************!/
        ===================================================
        Is used to schedule background jobs at regular intervals
        ===================================================

crontab -e # opens vim *GOOD LUCK EXITING XD* ; to be further researched


/************************* COMMON POSIX SIGNALS **************************!/
        Use man signal for more information
        ===================================================
        Signal	Number	Default action	Description

        sigint	2	Terminate	Interrupt from keyboard (Ctrl+C)
        sigquit	3	Core dump	Quit from keyboard (Ctrl+\)
        sigill	4	Core dump	Illegal instruction
        sigkill	9	Terminate	Kill (cannot be caught or ignored)
        sigterm	15	Terminate	Termination signal (can be caught or ignored)
        sigstp	19	Stop	Stop or pause to continue later (Ctrl+Z)
        sigcont	18	Continue	Continue if stopped
        ===================================================
        OPEN CALCULATOR FOR BELOW EXAMPLE
        ===================================================

kill -l # should return a list of all kill signal calls
ps -x # show running processes owned by user
pgrep -l "Calculator" # search for PID for calculator running process with string named of running process
killall "Calculator" # OR
kill -SIGKILL PID

/************************* Swapspace enquiry **************************!/
        Find swap space info on mac
        ===================================================

sysctl vm. swapusage

        Find swap space info on Linux
        ===================================================
free 

/************************* Swapspace enquiry **************************!/
        Loaded modules
        ===================================================

kmutil showloaded
kextstat